require "json"
require "selenium-webdriver"
require "rspec"
include RSpec::Expectations


@driver.find_element(:css, "a.navbar-brand.header-logo").click
    @driver.find_element(:id, "inputUsername").clear
    @driver.find_element(:id, "inputUsername").send_keys "AndrewPrice"
    @driver.find_element(:xpath, "//button[@type='submit']").click
    @driver.find_element(:xpath, "//button[@type='submit']").click
    @driver.find_element(:xpath, "//b").click
    @driver.find_element(:xpath, "//b").click
    @driver.find_element(:link, "Logout").click
    @driver.find_element(:id, "inputUsername").clear
    @driver.find_element(:id, "inputUsername").send_keys "AndrewPrice"
    @driver.find_element(:xpath, "//button[@type='submit']").click
    @driver.find_element(:link, "AndrewPrice").click
    @driver.find_element(:xpath, "//b").click
    @driver.find_element(:css, "div.view-outer-container.ng-scope").click
    @driver.find_element(:link, "AndrewPrice").click
    @driver.find_element(:link, "AndrewPrice").click
    @driver.find_element(:link, "Logout").click

describe "SeleniumElements" do

  before(:each) do
    @driver = Selenium::WebDriver.for :firefox
    @base_url = "http://tesladb.xypro.com:8080/"
    @accept_next_alert = true
    @driver.manage.timeouts.implicit_wait = 30
    @verification_errors = []
  end
  
  after(:each) do
    @driver.quit
    @verification_errors.should == []
  end
  
  it "test_selenium_elements" do
    @driver.get(@base_url + "/XWA/#/login")
    @driver.find_element(:css, "a.navbar-brand.header-logo").click
  end
  
  def element_present?(how, what)
    ${receiver}.find_element(how, what)
    true
  rescue Selenium::WebDriver::Error::NoSuchElementError
    false
  end
  
  def alert_present?()
    ${receiver}.switch_to.alert
    true
  rescue Selenium::WebDriver::Error::NoAlertPresentError
    false
  end
  
  def verify(&blk)
    yield
  rescue ExpectationNotMetError => ex
    @verification_errors << ex
  end
  
  def close_alert_and_get_its_text(how, what)
    alert = ${receiver}.switch_to().alert()
    alert_text = alert.text
    if (@accept_next_alert) then
      alert.accept()
    else
      alert.dismiss()
    end
    alert_text
  ensure
    @accept_next_alert = true
  end
end
